{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, GET_POST, POST_ERROR, DELETE_POST, UPDATE_LIKES, ADD_POST, REMOVE_COMMENT, ADD_COMMENT } from './types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  if (window.confirm(`Delete this post? This can NOT be undone!`)) {\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n      dispatch(setAlert('Post Removed', 'success'));\n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/user/work/devconnector/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","GET_POST","POST_ERROR","DELETE_POST","UPDATE_LIKES","ADD_POST","REMOVE_COMMENT","ADD_COMMENT","getPosts","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","getPost","id","addLike","postId","put","likes","removeLike","deletePost","window","confirm","delete","addPost","formData","config","headers","post","addComment"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, GET_POST, POST_ERROR, DELETE_POST, UPDATE_LIKES, ADD_POST, REMOVE_COMMENT, ADD_COMMENT } from './types';\n\n// Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Get post\nexport const getPost = (id) => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n\n// Add like\nexport const addLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {postId, likes: res.data}\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Remove like\nexport const removeLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {postId, likes: res.data}\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Delete post\nexport const deletePost = (postId) => async dispatch => {\n  if (window.confirm(`Delete this post? This can NOT be undone!`)){\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n      \n      \n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n  \n      dispatch(\n        setAlert('Post Removed', 'success')\n      );\n  \n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status, \n        },\n      });  \n    }\n  }\n  \n};  \n\n// Add post\nexport const addPost = (formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n    \n    \n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n\n    dispatch(\n      setAlert('Post Created', 'success')\n    );\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status, \n      },\n    });  \n  }\n};  \n// Add comment\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/posts/comment/`, formData, config);\n    \n    \n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n\n    dispatch(\n      setAlert('Post Created', 'success')\n    );\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status, \n      },\n    });  \n  }\n};  "]},"metadata":{},"sourceType":"module"}