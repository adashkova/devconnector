{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, GET_POST, POST_ERROR, DELETE_POST, UPDATE_LIKES, ADD_POST, REMOVE_COMMENT, ADD_COMMENT } from './types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Get post\n\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`).catch(error => console.log(error.response));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    console.log(error); // dispatch({\n    //   type: POST_ERROR,\n    //   payload: {\n    //     msg: error.response.statusText,\n    //     status: error.response.status,\n    //   },\n    // });\n    // dispatch(setAlert(`${error.response.msg}`, 'success'));\n  }\n}; // Remove like\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  if (window.confirm(`Delete this post? This can NOT be undone!`)) {\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n      dispatch(setAlert('Post Removed', 'success'));\n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Add comment\n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete comment\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/user/work/devconnector/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","GET_POST","POST_ERROR","DELETE_POST","UPDATE_LIKES","ADD_POST","REMOVE_COMMENT","ADD_COMMENT","getPosts","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","getPost","id","addLike","postId","put","catch","console","log","likes","removeLike","deletePost","window","confirm","delete","addPost","formData","config","headers","post","addComment","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n  GET_POSTS,\n  GET_POST,\n  POST_ERROR,\n  DELETE_POST,\n  UPDATE_LIKES,\n  ADD_POST,\n  REMOVE_COMMENT,\n  ADD_COMMENT,\n} from './types';\n\n// Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n// Get post\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_POST,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n\n// Add like\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios\n      .put(`/api/posts/like/${postId}`)\n      .catch(error => console.log(error.response));\n\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, likes: res.data },\n    });\n\n  } catch (error) {\n    console.log(error);\n\n    // dispatch({\n    //   type: POST_ERROR,\n    //   payload: {\n    //     msg: error.response.statusText,\n    //     status: error.response.status,\n    //   },\n    // });\n    // dispatch(setAlert(`${error.response.msg}`, 'success'));\n  }\n};\n// Remove like\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { postId, likes: res.data },\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n// Delete post\nexport const deletePost = postId => async dispatch => {\n  if (window.confirm(`Delete this post? This can NOT be undone!`)) {\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n\n      dispatch({\n        type: DELETE_POST,\n        payload: postId,\n      });\n\n      dispatch(setAlert('Post Removed', 'success'));\n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status,\n        },\n      });\n    }\n  }\n};\n\n// Add post\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n\n    dispatch({\n      type: ADD_POST,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n// Add comment\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data,\n    });\n\n    dispatch(setAlert('Comment Added', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n// Delete comment\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId,\n    });\n\n    dispatch(setAlert('Comment Removed', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}