{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, DELETE_POST, UPDATE_LIKES, ADD_POST } from './types'; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Add like\n\nexport const addLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Remove like\n\nexport const removeLike = postId => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        postId,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete post\n\nexport const deletePost = postId => async dispatch => {\n  if (window.confirm(`Are you sure? This can NOT be undone!`)) {\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n      dispatch(setAlert('Post Removed', 'success'));\n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n}; // Add post\n\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post Created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/user/work/devconnector/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","DELETE_POST","UPDATE_LIKES","ADD_POST","getPosts","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","addLike","postId","put","likes","removeLike","deletePost","window","confirm","delete","addPost","formData","config","headers","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, DELETE_POST, UPDATE_LIKES, ADD_POST } from './types';\n\n// Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Add like\nexport const addLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {postId, likes: res.data}\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Remove like\nexport const removeLike = (postId) => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${postId}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {postId, likes: res.data}\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status,\n      },\n    }); \n  }\n};\n// Delete post\nexport const deletePost = (postId) => async dispatch => {\n  if (window.confirm(`Are you sure? This can NOT be undone!`)){\n    try {\n      await axios.delete(`/api/posts/${postId}`);\n      \n      \n      dispatch({\n        type: DELETE_POST,\n        payload: postId\n      });\n  \n      dispatch(\n        setAlert('Post Removed', 'success')\n      );\n  \n    } catch (error) {\n      dispatch({\n        type: POST_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status, \n        },\n      });  \n    }\n  }\n  \n};  \n\n// Add post\nexport const addPost = (formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    const res = await axios.post(`/api/posts`, formData, config);\n    \n    \n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n\n    dispatch(\n      setAlert('Post Created', 'success')\n    );\n\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status, \n      },\n    });  \n  }\n};  "]},"metadata":{},"sourceType":"module"}