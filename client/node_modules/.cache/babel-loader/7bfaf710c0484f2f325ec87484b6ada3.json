{"ast":null,"code":"var _jsxFileName = \"/home/user/work/devconnector/client/src/components/posts/Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../../actions/post';\nimport Spinner from '../layout/Spinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Posts = ({\n  getPosts,\n  post: {\n    posts,\n    loading\n  }\n}) => {\n  _s();\n\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n  return loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      class: \"large text-primary\",\n      children: \"Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      class: \"lead\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        class: \"fas fa-user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), \" Welcome to the community!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), posts.map(post => {})]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Posts, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Posts;\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getPosts\n})(Posts);\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/home/user/work/devconnector/client/src/components/posts/Posts.jsx"],"names":["React","Fragment","useEffect","PropTypes","connect","getPosts","Spinner","Posts","post","posts","loading","map","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEF,EAAAA,QAAF;AAAYG,EAAAA,IAAI,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAlB,CAAD,KAA4C;AAAA;;AACxDR,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;AAIA,SAAOK,OAAO,gBACZ,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADY,gBAGZ,QAAC,QAAD;AAAA,4BACE;AAAI,MAAA,KAAK,EAAC,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAG,MAAA,KAAK,EAAC,MAAT;AAAA,8BACE;AAAG,QAAA,KAAK,EAAC;AAAT;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAOCD,KAAK,CAACE,GAAN,CAAUH,IAAI,IAAI,CAElB,CAFA,CAPD;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAeD,CApBD;;GAAMD,K;;KAAAA,K;AAsBNA,KAAK,CAACK,SAAN,GAAkB;AAChBP,EAAAA,QAAQ,EAAEF,SAAS,CAACU,IAAV,CAAeC,UADT;AAEhBN,EAAAA,IAAI,EAAEL,SAAS,CAACY,MAAV,CAAiBD;AAFP,CAAlB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCT,EAAAA,IAAI,EAAES,KAAK,CAACT;AADoB,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACY,eAAD,EAAkB;AAAEX,EAAAA;AAAF,CAAlB,CAAP,CAAuCE,KAAvC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../../actions/post';\nimport Spinner from '../layout/Spinner';\n\nconst Posts = ({ getPosts, post: { posts, loading } }) => {\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  return loading ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      <h1 class=\"large text-primary\">Posts</h1>\n      <p class=\"lead\">\n        <i class=\"fas fa-user\"></i> Welcome to the community!\n      </p>\n      {/*POST FORM */}\n    \n    {posts.map(post => {\n        \n    })}\n    </Fragment>\n  );\n};\n\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  post: state.post,\n});\n\nexport default connect(mapStateToProps, { getPosts })(Posts);\n"]},"metadata":{},"sourceType":"module"}