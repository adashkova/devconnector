{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_FAIL, REGISTER_SUCCESS, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('./api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //","map":{"version":3,"sources":["/home/user/work/devconnector/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_FAIL","REGISTER_SUCCESS","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","err","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n  REGISTER_FAIL,\n  REGISTER_SUCCESS,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n   LOGOUT\n} from './types';\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('./api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\nexport const register =\n  ({ name, email, password }) =>\n  async dispatch => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    const body = JSON.stringify({ name, email, password });\n    try {\n      const res = await axios.post('/api/users', body, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n      dispatch(loadUser())\n    } catch (error) {\n      const errors = error.response.data.errors;\n\n      if (errors) {\n        errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n      }\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n // login user\n  export const login =\n    ( email, password ) =>\n    async dispatch => { \n      const config = {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      };\n  \n      const body = JSON.stringify({  email, password });\n      try {\n        const res = await axios.post('/api/auth', body, config);\n  \n        dispatch({\n          type: LOGIN_SUCCESS,\n          payload: res.data,\n        });\n\n        dispatch(loadUser())\n        \n      } catch (error) {\n        const errors = error.response.data.errors;\n  \n        if (errors) {\n          errors.forEach(err => dispatch(setAlert(err.msg, 'danger')));\n        }\n        dispatch({\n          type: LOGIN_FAIL,\n        });\n      }\n    };\n    //\n  \n"]},"metadata":{},"sourceType":"module"}